// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ocelot.proto

package ocelot

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type JobInstanceMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID      string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	InstanceID string `protobuf:"bytes,2,opt,name=InstanceID,proto3" json:"InstanceID,omitempty"`
	Ctime      int64  `protobuf:"varint,3,opt,name=Ctime,proto3" json:"Ctime,omitempty"`
	Mtime      int64  `protobuf:"varint,4,opt,name=Mtime,proto3" json:"Mtime,omitempty"`
	Success    bool   `protobuf:"varint,5,opt,name=Success,proto3" json:"Success,omitempty"`
	// WARNING: Any type resolves map[string]interface{} - plenty of warnings
	// online about how this might be subject to change
	Params map[string]string `protobuf:"bytes,6,rep,name=Params,proto3" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobInstanceMsg) Reset() {
	*x = JobInstanceMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocelot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInstanceMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInstanceMsg) ProtoMessage() {}

func (x *JobInstanceMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ocelot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInstanceMsg.ProtoReflect.Descriptor instead.
func (*JobInstanceMsg) Descriptor() ([]byte, []int) {
	return file_ocelot_proto_rawDescGZIP(), []int{0}
}

func (x *JobInstanceMsg) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobInstanceMsg) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *JobInstanceMsg) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *JobInstanceMsg) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *JobInstanceMsg) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JobInstanceMsg) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_ocelot_proto protoreflect.FileDescriptor

var file_ocelot_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x4d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x92, 0x01, 0x0a, 0x0c, 0x4f, 0x63, 0x65, 0x6c,
	0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x6f, 0x63,
	0x65, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x16,
	0x2e, 0x6f, 0x63, 0x65, 0x6c, 0x6f, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocelot_proto_rawDescOnce sync.Once
	file_ocelot_proto_rawDescData = file_ocelot_proto_rawDesc
)

func file_ocelot_proto_rawDescGZIP() []byte {
	file_ocelot_proto_rawDescOnce.Do(func() {
		file_ocelot_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocelot_proto_rawDescData)
	})
	return file_ocelot_proto_rawDescData
}

var file_ocelot_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ocelot_proto_goTypes = []interface{}{
	(*JobInstanceMsg)(nil), // 0: ocelot.JobInstanceMsg
	nil,                    // 1: ocelot.JobInstanceMsg.ParamsEntry
}
var file_ocelot_proto_depIdxs = []int32{
	1, // 0: ocelot.JobInstanceMsg.Params:type_name -> ocelot.JobInstanceMsg.ParamsEntry
	0, // 1: ocelot.OcelotWorker.Execute:input_type -> ocelot.JobInstanceMsg
	0, // 2: ocelot.OcelotWorker.ExecuteStream:input_type -> ocelot.JobInstanceMsg
	0, // 3: ocelot.OcelotWorker.Execute:output_type -> ocelot.JobInstanceMsg
	0, // 4: ocelot.OcelotWorker.ExecuteStream:output_type -> ocelot.JobInstanceMsg
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ocelot_proto_init() }
func file_ocelot_proto_init() {
	if File_ocelot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocelot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInstanceMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocelot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ocelot_proto_goTypes,
		DependencyIndexes: file_ocelot_proto_depIdxs,
		MessageInfos:      file_ocelot_proto_msgTypes,
	}.Build()
	File_ocelot_proto = out.File
	file_ocelot_proto_rawDesc = nil
	file_ocelot_proto_goTypes = nil
	file_ocelot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OcelotWorkerClient is the client API for OcelotWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OcelotWorkerClient interface {
	Execute(ctx context.Context, in *JobInstanceMsg, opts ...grpc.CallOption) (*JobInstanceMsg, error)
	ExecuteStream(ctx context.Context, opts ...grpc.CallOption) (OcelotWorker_ExecuteStreamClient, error)
}

type ocelotWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewOcelotWorkerClient(cc grpc.ClientConnInterface) OcelotWorkerClient {
	return &ocelotWorkerClient{cc}
}

func (c *ocelotWorkerClient) Execute(ctx context.Context, in *JobInstanceMsg, opts ...grpc.CallOption) (*JobInstanceMsg, error) {
	out := new(JobInstanceMsg)
	err := c.cc.Invoke(ctx, "/ocelot.OcelotWorker/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocelotWorkerClient) ExecuteStream(ctx context.Context, opts ...grpc.CallOption) (OcelotWorker_ExecuteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OcelotWorker_serviceDesc.Streams[0], "/ocelot.OcelotWorker/ExecuteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocelotWorkerExecuteStreamClient{stream}
	return x, nil
}

type OcelotWorker_ExecuteStreamClient interface {
	Send(*JobInstanceMsg) error
	Recv() (*JobInstanceMsg, error)
	grpc.ClientStream
}

type ocelotWorkerExecuteStreamClient struct {
	grpc.ClientStream
}

func (x *ocelotWorkerExecuteStreamClient) Send(m *JobInstanceMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ocelotWorkerExecuteStreamClient) Recv() (*JobInstanceMsg, error) {
	m := new(JobInstanceMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OcelotWorkerServer is the server API for OcelotWorker service.
type OcelotWorkerServer interface {
	Execute(context.Context, *JobInstanceMsg) (*JobInstanceMsg, error)
	ExecuteStream(OcelotWorker_ExecuteStreamServer) error
}

// UnimplementedOcelotWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedOcelotWorkerServer struct {
}

func (*UnimplementedOcelotWorkerServer) Execute(context.Context, *JobInstanceMsg) (*JobInstanceMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedOcelotWorkerServer) ExecuteStream(OcelotWorker_ExecuteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStream not implemented")
}

func RegisterOcelotWorkerServer(s *grpc.Server, srv OcelotWorkerServer) {
	s.RegisterService(&_OcelotWorker_serviceDesc, srv)
}

func _OcelotWorker_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInstanceMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcelotWorkerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocelot.OcelotWorker/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcelotWorkerServer).Execute(ctx, req.(*JobInstanceMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcelotWorker_ExecuteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OcelotWorkerServer).ExecuteStream(&ocelotWorkerExecuteStreamServer{stream})
}

type OcelotWorker_ExecuteStreamServer interface {
	Send(*JobInstanceMsg) error
	Recv() (*JobInstanceMsg, error)
	grpc.ServerStream
}

type ocelotWorkerExecuteStreamServer struct {
	grpc.ServerStream
}

func (x *ocelotWorkerExecuteStreamServer) Send(m *JobInstanceMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ocelotWorkerExecuteStreamServer) Recv() (*JobInstanceMsg, error) {
	m := new(JobInstanceMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OcelotWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ocelot.OcelotWorker",
	HandlerType: (*OcelotWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _OcelotWorker_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStream",
			Handler:       _OcelotWorker_ExecuteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ocelot.proto",
}
